// Autogenerated by Nightwatch
// Refer to the online docs for more details: https://nightwatchjs.org/gettingstarted/configuration/
const Services = {}; loadServices()
global.testHelpers = require('./tests/e2e/helpers.e2e')
require('dotenv').config({ path: './env' })
const fork = require('child_process').fork;
const browserSize = 'window-size=1900x1080'

module.exports = {
  // An array of folders (excluding subfolders) where your tests are located;
  // if this is not specified, the test source must be passed as the second argument to the test runner.
  src_folders: ['./tests/e2e/tests'],

  // See https://nightwatchjs.org/guide/working-with-page-objects/
  page_objects_path: '',

  // See https://nightwatchjs.org/guide/extending-nightwatch/#writing-custom-commands
  custom_commands_path: ['./tests/e2e/custom-commands'],

  // See https://nightwatchjs.org/guide/extending-nightwatch/#writing-custom-assertions
  custom_assertions_path: '',

  // See https://nightwatchjs.org/guide/#external-globals
  globals_path: '',

  webdriver: {},
  "test_workers" : { "enabled" : true, "workers" : "auto" },
  parallel_process_delay: process.env.E2E_PARALLEL_PROCESS_DELAY? parseInt(process.env.E2E_PARALLEL_PROCESS_DELAY) : 4000,
  test_settings: {
    default: {
      disable_error_log: false,
      launch_url: 'https://nightwatchjs.org',
      // "default_path_prefix" : "/wd/hub",

      screenshots: {
        enabled: false,
        path: 'screens',
        on_failure: true
      },

      desiredCapabilities: {
        javascriptEnabled: true,
        acceptSslCerts: true
      },

      webdriver: {
        start_process: true,
        server_path: (Services.geckodriver ? Services.geckodriver.path : '')
      },
      live_output: true,
    },

    'chrome.template': {
      desiredCapabilities: {
        browserName: 'chrome',
        // handleAlerts: true,
        loggingPrefs: {
          browser: 'ALL',
          driver: 'ALL',
          performance: 'ALL',
          server: 'ALL'
        },
        'goog:chromeOptions': {
          args: [
            'no-sandbox',
            'ignore-certificate-errors',
            'allow-insecure-localhost',
            "headless",
            browserSize,
            'allow-file-access-from-files',
            'use-fake-device-for-media-stream',
            'use-fake-ui-for-media-stream',
            'disable-translate',
            'no-process-singleton-dialog',
            'disable-gesture-requirement-for-media-playback',
            'auto-select-desktop-capture-source="Entire screen"',
            'autoplay-policy=no-user-gesture-required',
            'no-user-gesture-required',
            'ignore-certificate-errors',
            'disable-dev-shm-usage',
            'disable-gpu'
          ]
        }
      }
    },
    chrome: {
      extends: 'chrome.template',
      globals: {
        'waitForConditionPollInterval': 500, // sometimes internet is slow so wait.
        'waitForConditionTimeout': 20000, // sometimes internet is slow so wait.
        'asyncHookTimeout': 60000,
        'retryAssertionTimeout': 30000,
        before: (browser,done)=>{
          process.env.NODE_ENV  = "production";
          const server = fork('./node_modules/e2e-proxy/index.js');
          const prom1 = new Promise((resolve)=>{
            server.on('message', () => {
              resolve()
            });
          })
          return  Promise.all([
            prom1,
          ]).then(()=>{
            done()
          })
        },
      },
      webdriver: {
        start_process: true,
        port: 9515,
        server_path: (Services.chromedriver ? Services.chromedriver.path : ''),
        cli_args: [
          // --verbose
        ],
        log_path: 'logs'
      },
      desiredCapabilities: {
        browserName: 'chrome',
        // handleAlerts: true,
        loggingPrefs: {
          browser: 'ALL',
          driver: 'ALL',
          performance: 'ALL',
          server: 'ALL'
        },
        'goog:chromeOptions': {
          args: [
            'no-sandbox',
            'ignore-certificate-errors',
            'allow-insecure-localhost',
            browserSize,
            'allow-file-access-from-files',
            'use-fake-device-for-media-stream',
            'use-fake-ui-for-media-stream',
            'disable-translate',
            'no-process-singleton-dialog',
            'disable-gesture-requirement-for-media-playback',
            'auto-select-desktop-capture-source="Entire screen"',
            'autoplay-policy=no-user-gesture-required',
            'no-user-gesture-required',
            'ignore-certificate-errors',
            'disable-dev-shm-usage',
            'disable-gpu'
          ]
        }
      }
    },
    chromeHeadless: {
      extends: 'chrome.template',
      globals: {
        'waitForConditionPollInterval': 500, // sometimes internet is slow so wait.
        'waitForConditionTimeout': 20000, // sometimes internet is slow so wait.
        'asyncHookTimeout': 60000,
        'retryAssertionTimeout': 30000,
        before: (browser,done)=>{
          process.env.NODE_ENV  = "production";
          const server = fork('./node_modules/e2e-proxy/index.js');
          const prom1 = new Promise((resolve)=>{
            server.on('message', () => {
              resolve()
            });
          })
          return  Promise.all([
            prom1,
          ]).then(()=>{
            done()
          })
        },
      },
      webdriver: {
        start_process: true,
        port: 9515,
        server_path: (Services.chromedriver ? Services.chromedriver.path : ''),
        cli_args: [
          // --verbose
        ],
        log_path: 'logs'
      },
    },
    chromeProd: {
      extends: 'chrome.template',
      globals: {
        'waitForConditionPollInterval': 500, // sometimes internet is slow so wait.
        'waitForConditionTimeout': 20000, // sometimes internet is slow so wait.
        'asyncHookTimeout': 60000,
        'retryAssertionTimeout': 30000,
        before: (browser,done)=>{
          process.env.NODE_ENV  = "production";
          const server = fork('./server');
          const server2 = fork('./node_modules/e2e-proxy/index.js');
          const prom1 = new Promise((resolve)=>{
            server.on('message', () => {
              resolve()
            });
          })
          const prom2 = new Promise((resolve)=>{
            server2.on('message', () => {
              resolve()
            });
          })
          return  Promise.all([
            prom1,
            prom2
          ]).then(()=>{
            done()
          })
        },

        after:function(browser,done){
          done();
          process.exit();
        }
      },
      webdriver: {
        start_process: true,
        port: 9515,
        server_path: (Services.chromedriver ? Services.chromedriver.path : ''),
        cli_args: [
          // --verbose
        ],
      }
    },
  }
}

function loadServices () {
  try {
    Services.seleniumServer = require('selenium-server')
  } catch (err) {}

  try {
    Services.chromedriver = require('chromedriver')
  } catch (err) {}

  try {
    Services.geckodriver = require('geckodriver')
  } catch (err) {}

  try {
    Services.operadriver = require('operadriver')
  } catch (err) {}
}
