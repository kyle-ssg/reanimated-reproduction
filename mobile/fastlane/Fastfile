default_platform :ios

platform :ios do


  #Uncomment to Enable slack on builds
  #before_all do
   # ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
  #end


  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    sh "./scripts/deploy.sh"        #STEP 1 : Set env to production
    sh "fastlane icon"              #STEP 2 : Update appicon
    sigh                            #STEP 3 : Ensure provisioning profiles are correct
    produce                         #STEP 4 : Create app in appstore if it needs to be
    increment_build_number({        #STEP 5 : Increment build number
      xcodeproj: 'ios/mobile.xcodeproj'
    })
    gym(scheme: "prod")             #STEP 6 : Compile APP
    deliver(upload_metadata: true)  #STEP 7 : Upload metadata
    testflight                      #STEP 8 : Upload to TestFlight


    # You can also use other beta testing services here (run `fastlane actions`)
  end

  desc "Generate app icons in various sizes"
  lane :icon do
    appicon(appicon_image_file: './fastlane/AppIcon.png',
      appicon_path: './ios/app/Images.xcassets',
      appicon_devices: [:ipad, :iphone])
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    if lane == :beta
    #  slack(
     #   message: "Successfully deployed new Testflight build."
    #  )
    end
  end

  error do |lane, exception|
    #slack(
     # message: exception.message,
     # success: false
    #)
  end
end

platform :android do
  def increment_version_code(gradle_build: './android/app/build.gradle')
    sh %Q{cd ../ && echo "$(awk '{sub(/versionCode [[:digit:]]+$/,"versionCode "$2+1)}1' #{gradle_build})" > #{gradle_build} && cd -}
  end


  #Uncomment to Enable slack on builds
  #before_all do
   # ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
  #end

  lane :beta do
    sh "./scripts/deploy.sh"
    increment_version_code

    # build the release variant
    gradle(task: "assembleRelease",
      project_dir:'./android')

    # upload to Google Play
    supply(track: "beta",
      json_key: './fastlane/android/Google Play Android Developer-4c942198c95f.json',
      package_name: 'com.ssg.boilerplate',
      apk_paths: ['./android/app/build/outputs/apk/app-release.apk'])
  end

  desc "Generate app icons in various sizes"
  lane :icon do
    android_appicon(appicon_image_file: './fastlane/AppIcon.png',
      appicon_devices: [:phone, :tablet],
      appicon_path:'./android/app/src/main/res/mipmap')
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    if lane == :beta
      #slack(
      #  message: "Successfully deployed new Android beta build."
      #)
    end
  end

  error do |lane, exception|
  #  slack(
   #   message: exception.message,
   #   success: false
 #   )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
