
apply plugin: "com.android.application"

import com.android.build.OutputFile

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.1"

    defaultConfig {
        multiDexEnabled true
        applicationId "com.solidstategroup.patientview"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode 2
        vectorDrawables.useSupportLibrary = true
        versionName "1.01"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }
    packagingOptions {
          exclude 'META-INF/maven/com.squareup.okhttp3/okhttp/pom.properties'
          exclude 'META-INF/maven/com.squareup.okio/okio/pom.xml'
          exclude 'META-INF/maven/com.squareup.okhttp3/okhttp/pom.xml'
          exclude 'META-INF/maven/com.squareup.okio/okio/pom.properties'
        }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
   signingConfigs {
        release {
            storeFile file("my-release-key.keystore")
            storePassword "android"
            keyAlias "android"
            keyPassword "android"
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    compile project(':react-native-twitter')

    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:25.0.1'


    compile project(':react-native-image-crop-picker')
    compile project(':react-native-bottomsheet')
    compile project(':react-native-branch')
    compile project(':react-native-facebook-login')
    compile project(':react-native-google-sign-in')
    compile project(':react-native-fcm')
    compile project(':react-native-interactable')
    //ANDROID_PUSH_NOTIFICATIONS
   compile project(':react-native-fcm')
   compile 'com.google.firebase:firebase-core:10.0.1' //this decides your firebase SDK version

    compile project(':react-native-fs')
    compile "com.facebook.react:react-native:+"  // From node_modules
    compile project(':react-native-navigation')
    compile project(':react-native-contacts')
    compile project(':react-native-share')
    compile project(':react-native-linear-gradient')
    compile project(':react-native-svg')
    compile project(':lottie-react-native')
    compile 'com.android.support:design:25.0.1'
    compile 'com.android.support:multidex:1.0.1'

    compile project(':react-native-fetch-blob')
    compile project(':react-native-image-resizer')
    compile project(':react-native-camera')
    compile project(':react-native-device-info')
    compile project(':react-native-charts-wrapper')
    compile project(':react-native-vector-icons')

}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply plugin: 'com.google.gms.google-services'
